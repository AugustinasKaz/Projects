{"version":3,"sources":["Component/love/Form.module.css","Component/love/Home.js","Component/love/Form.js","Component/love/Comment.js","Component/love/All_comments.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","form1","result","label","comment_header","comment_container","Home","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","response","LoadData","bind","assertThisInitialized","inherits","createClass","key","value","_LoadData","asyncToGenerator","regenerator_default","a","mark","_callee","promise","status","data","_this2","wrap","_context","prev","next","axios","get","sent","filter","obj","id","ids","setState","console","log","stop","apply","arguments","prevProps","prevState","ResponseCalculation","error","map","react_default","createElement","className","styles","percentage","first_name","second_name","message","Component","Form","handleChange","e","target","name2","name1","handleSubmit","test","input_message","SendNames","preventDefault","send_id","post","post_response","err","body","onSubmit","type","onChange","love_Home","Comment","comment","name","sendComment","user","then","catch","center","All_comments","ResponseComments","date","author","text","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cd9a97b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form1\":\"Form_form1__3bPRI\",\"result\":\"Form_result__2P6bx\",\"label\":\"Form_label__1f9G4\",\"comment_header\":\"Form_comment_header__18-eB\",\"comment_container\":\"Form_comment_container__2yY4v\"};","import React, { Component } from 'react'\nimport axios from \"axios\";\nimport styles from './Form.module.css'\n\nexport class Home extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      response: []\n    };\n    this.LoadData = this.LoadData.bind(this);\n  }\n\n  async LoadData(){\n    const promise = await axios.get(\"http://127.0.0.1:8000/api/response\");\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.response.filter(obj => obj.id == this.props.ids);\n      this.setState({response:data});\n    }\n    else{\n      console.log(status)\n    }\n  }\n  \n  componentWillMount(){\n    \n    this.LoadData();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if(prevProps.ids !== this.props.ids){\n      this.LoadData();\n    }\n  }\n  render(){\n    const error_prop = this.props.error;\n    let ResponseCalculation;\n    \n    if(error_prop === false){\n      ResponseCalculation = this.state.response.map(result =>(\n       <div key={result.id} className={styles.result}>\n       <h3>These are the results of the calculations by Dr. Love:  {result.percentage}%</h3>\n       <h2>{result.first_name} {result.second_name}</h2>\n       <h2>{result.result}</h2>\n       </div>\n    ));\n    }\n    else{\n      ResponseCalculation = this.state.response.map(result =>(\n        <div key={result.id} className={styles.result}>\n        <h3>{result.message}</h3>\n        </div>\n      ));\n    }\n    return (\n      <div className={styles.result}>\n        {ResponseCalculation}\n      </div>\n    )\n  }\n}\n\nexport default Home\n\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Home from './Home.js'\nimport styles from './Form.module.css'\nclass Form extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name1: \"\",\n      name2: \"\",\n      send_id: null,\n      error: false,\n      input_message: '',\n    };\n    this.SendNames = this.SendNames.bind(this);\n  }\n    \n    async SendNames(){\n     const promise = await axios.post(\"http://127.0.0.1:8000/api/names/\", {name1: this.state.name1, name2: this.state.name2});\n     const post_response = promise.data;\n     this.setState({send_id: post_response.ids, error: post_response.err})  \n    }\n    \n    handleChange = (e) =>{\n      if(e.target.id === \"2\"){\n        this.setState({name2: e.target.value})\n      }\n      if(e.target.id === \"1\"){\n        this.setState({name1: e.target.value})\n      }\n    }\n\n    handleSubmit = (e) =>{\n      if(!this.state.name1 || !this.state.name2){\n        this.setState({input_message: \"input fields can not be empty\"})\n      }\n      else if(/^[a-zA-Z]+$/.test(this.state.name1) === false || /^[a-zA-Z]+$/.test(this.state.name2) === false){\n        this.setState({input_message: \"input fields can not contain numeric values\"});\n      }\n      else{\n      this.setState({input_message: \"\"})\n      this.SendNames();\n      }\n      e.preventDefault();\n    }\n  \n  render() {\n    return (\n      <div className={styles.body}>\n      <h1>Love calculator</h1>\n      <h2>Fill the form to get answer from love calculator</h2>\n      <form onSubmit={this.handleSubmit} className={styles.form1}>\n        <span className={styles.label}><label>\n          Name1:\n          <input type=\"text\" id=\"1\" value={this.state.name1} onChange={this.handleChange} />\n        </label></span>\n\n        <span className={styles.label}><label>\n          Name2:\n          <input type=\"text\" id=\"2\" value={this.state.name2} onChange={this.handleChange} />\n        </label></span>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div>\n        <p>{this.state.input_message}</p>\n      </div>\n      <Home error={this.state.error} ids={this.state.send_id}/>\n      </div>\n    )\n  }\n}\n\nexport default Form\n","import React, { Component } from 'react'\nimport styles from './Form.module.css'\nimport axios from 'axios'\n\n\nclass Comment extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name: \"\",\n      comment: \"\",\n      input_message: ''\n    }\n    this.sendComment = this.sendComment.bind(this);\n  }\n  \n  async sendComment(){\n    await axios.post(\"http://127.0.0.1:8000/api/comment/\", {user: this.state.name, comment: this.state.comment}).then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n    \n  }\n  handleChange = (e) =>{\n    if(e.target.id === \"2\"){\n      this.setState({comment: e.target.value})\n    }\n    if(e.target.id === \"1\"){\n      this.setState({name: e.target.value})\n    }\n  }\n\n  handleSubmit = (e) =>{\n    if(!this.state.name || !this.state.comment){\n      this.setState({input_message: \"input fields can not be empty\"})\n    }\n    else{\n    this.setState({input_message: \"\"})\n    this.sendComment();\n    }\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className={styles.body}>\n      <h3>Leave a comment</h3>\n      <div>\n        <span>{this.state.input_message}</span>\n      </div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Your Name:\n          <input className={styles.center}type=\"text\" id=\"1\" value={this.state.name} onChange={this.handleChange}/>\n        </label>\n        <br/>\n        <label>\n          Comment:\n          <textarea type=\"text\" id=\"2\"className={styles.center} value={this.state.comment} onChange={this.handleChange}/>\n        </label>\n        <br/>\n        <input type=\"submit\" value=\"Submit\" onSubmit={this.handleSubmit}/>\n      </form>\n      </div>\n    )\n  }\n}\n\nexport default Comment\n","import React, { Component } from 'react'\nimport axios from \"axios\";\nimport styles from './Form.module.css'\n\nexport class All_comments extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            response: []\n        }\n        this.LoadData = this.LoadData.bind(this);\n    }\n    async LoadData(){\n        const promise = await axios.get(\"http://127.0.0.1:8000/api/all_comments\");\n        const status = promise.status;\n        if(status===200)\n        {\n          const data = promise.data.response;\n          this.setState({response:data});\n        }\n        else{\n          console.log(status)\n        }\n    }\n\n    componentWillMount(){\n        this.LoadData();\n    }\n\n    render(){\n       const ResponseComments = this.state.response.map(result =>(\n            <div key={result.id} className={styles.comment_container}>\n            <h3>Posted at: {result.date} Author: {result.author}</h3>\n            <h2>Comment{result.text}</h2>\n            \n            </div>\n         ));\n        return (\n            <div className={styles.body}>\n                <h1 className={styles.comment_header}>Comments</h1>\n                <br/>\n                {ResponseComments}\n                <br/>\n            </div>\n        )\n    }\n}\n\nexport default All_comments\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route} from 'react-router-dom'\nimport Form from  './Component/love/Form.js'\nimport Comment from  './Component/love/Comment.js'\nimport All_comments from './Component/love/All_comments.js'\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <BrowserRouter>\n          <Route path='/' component={Form}/>\n          <Route path='/' component={Comment}/>\n          <Route path='/' component={All_comments}/>\n        </BrowserRouter>\n      </div>\n     )\n   }\n}      \n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}